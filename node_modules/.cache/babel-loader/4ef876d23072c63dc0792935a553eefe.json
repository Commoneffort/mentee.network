{"ast":null,"code":"import React from \"react\";\nimport { Api, JsonRpc, JsSignatureProvider } from \"eosjs\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\"; // Use eosjs2 if your version of eosjs is > 16\n\nimport Eos from 'eosjs'; // eosio endpoint\n\nconst endpoint = \"http://jungle2.cryptolions.io:80\"; // Jungle\n// Networks are used to reference certain blockchains.\n// They let you get accounts and help you build signature providers.\n\nconst network = ScatterJS.Network.fromJson({\n  blockchain: \"eos\",\n  protocol: \"http\",\n  host: \"jungle2.cryptolions.io\",\n  port: 80,\n  // chainId: \"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906\" // EOS Main Net\n  chainId: \"e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473\" // Jungle\n\n});\n\nclass EOSIOClient extends React.Component {\n  constructor(dappName, contractAccount) {\n    this.dappName = dappName;\n    this.contractAccount = contractAccount;\n    ScatterJS.plugins(new ScatterEOS());\n    this.rpc = new JsonRpc(endpoint);\n    window.ScatterJS = null;\n  }\n\n}\n\nexport default EOSIOClient;","map":{"version":3,"sources":["/Users/anetasmac/mentee-react/src/Eosio-client.js"],"names":["React","Api","JsonRpc","JsSignatureProvider","ScatterJS","ScatterEOS","Eos","endpoint","network","Network","fromJson","blockchain","protocol","host","port","chainId","EOSIOClient","Component","constructor","dappName","contractAccount","plugins","rpc","window"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,mBAAvB,QAAkD,OAAlD;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CAAkD;;AAClD,OAAOC,GAAP,MAAgB,OAAhB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,kCAAjB,C,CAAqD;AAErD;AACA;;AACA,MAAMC,OAAO,GAAGJ,SAAS,CAACK,OAAV,CAAkBC,QAAlB,CAA2B;AAC1CC,EAAAA,UAAU,EAAE,KAD8B;AAE1CC,EAAAA,QAAQ,EAAE,MAFgC;AAG1CC,EAAAA,IAAI,EAAE,wBAHoC;AAI1CC,EAAAA,IAAI,EAAE,EAJoC;AAK1C;AACAC,EAAAA,OAAO,EAAE,kEANiC,CAMkC;;AANlC,CAA3B,CAAhB;;AASA,MAAMC,WAAN,SAA0BhB,KAAK,CAACiB,SAAhC,CAA0C;AAE1CC,EAAAA,WAAW,CAACC,QAAD,EAAWC,eAAX,EAA4B;AACnC,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACAhB,IAAAA,SAAS,CAACiB,OAAV,CAAkB,IAAIhB,UAAJ,EAAlB;AACA,SAAKiB,GAAL,GAAW,IAAIpB,OAAJ,CAAYK,QAAZ,CAAX;AACAgB,IAAAA,MAAM,CAACnB,SAAP,GAAmB,IAAnB;AACD;;AARuC;;AA4C1C,eAAeY,WAAf","sourcesContent":["import React from \"react\";\nimport { Api, JsonRpc, JsSignatureProvider } from \"eosjs\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\"; // Use eosjs2 if your version of eosjs is > 16\nimport Eos from 'eosjs';\n\n// eosio endpoint\nconst endpoint = \"http://jungle2.cryptolions.io:80\"; // Jungle\n\n// Networks are used to reference certain blockchains.\n// They let you get accounts and help you build signature providers.\nconst network = ScatterJS.Network.fromJson({\n\tblockchain: \"eos\",\n\tprotocol: \"http\",\n\thost: \"jungle2.cryptolions.io\",\n\tport: 80,\n\t// chainId: \"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906\" // EOS Main Net\n\tchainId: \"e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473\" // Jungle\n});\n\nclass EOSIOClient extends React.Component {\n\nconstructor(dappName, contractAccount) {\n    this.dappName = dappName;\n    this.contractAccount = contractAccount;\n    ScatterJS.plugins(new ScatterEOS());\n    this.rpc = new JsonRpc(endpoint);\n    window.ScatterJS = null;\n  }connect = async () => {\n    await ScatterJS.scatter.connect(this.dappName).then(connected => {\n      if (!connected) return  false;\n      this.scatter = ScatterJS.scatter;\n    });await this.scatter.getIdentity({ accounts: [network] }).then(() => {\n      this.account = this.scatter.identity.accounts.find(\n        e => e.blockchain === 'eos'\n      );\n    });if (this.account === null) return false;return true;\n  };transaction = async (action, data) => {\n    this.api = this.scatter.eos(network, Api, { rpc: this.rpc });const resultWithConfig = await this.api.transact(\n      {\n        actions: [\n          {\n            account: this.contractAccount,\n            name: action,\n            authorization: [\n              {\n                actor: this.account.name,\n                permission: this.account.authority\n              }\n            ],\n            data: {\n              ...data\n            }\n          }\n        ]\n      },\n      {\n        blocksBehind: 3,\n        expireSeconds: 30\n      }\n    );\n    console.log(resultWithConfig);\n    return true;\n  };}\nexport default EOSIOClient;"]},"metadata":{},"sourceType":"module"}