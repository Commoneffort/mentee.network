{"ast":null,"code":"import _objectSpread from \"/Users/anetasmac/mentee-react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/anetasmac/mentee-react/src/GroupContext.js\";\nimport React, { Component } from \"react\";\nimport { GroupsData } from \"./GroupsData\";\nimport { GroupDetail } from \"./GroupsData\";\nconst GroupContext = React.createContext(); //Provider\n//Consumer\n\nclass GroupProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      groups: [],\n      Groups: [],\n      GroupDetail: [],\n      modalOpen: false,\n      modalMember: []\n    };\n\n    this.setGroups = () => {\n      let tempGroups = [];\n      GroupsData.forEach(user => {\n        const singleUser = _objectSpread({}, user);\n\n        tempGroups = [...tempGroups, singleUser];\n      });\n      this.setState(() => {\n        return {\n          groups: tempGroups\n        };\n      });\n    };\n\n    this.getUser = id => {\n      const group = this.state.groups.find(user => user.id === id);\n      return group;\n    };\n\n    this.handleGroup = id => {\n      const group = this.getUser(id);\n      this.setState(() => {\n        return {\n          GroupDetail: group\n        };\n      });\n    };\n\n    this.addGroup = id => {\n      let tempGroups = [...this.state.groups];\n      const index = tempGroups.indexOf(this.getUser(id));\n      const group = tempGroups[index];\n      group.inNetwork = true;\n      group.count = 1;\n      this.setState(() => {\n        return {\n          groups: tempGroups,\n          Groups: [...this.state.Groups, group]\n        };\n      }, () => {\n        console.log(this.state);\n      });\n    };\n\n    this.openModal = id => {\n      const group = this.getUser(id);\n      this.setState(() => {\n        return {\n          modalMember: group,\n          modalOpen: true\n        };\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState(() => {\n        return {\n          modalOpen: false\n        };\n      });\n    };\n\n    this.removeUser = id => {\n      let tempGroups = [...this.state.groups];\n      let tempNetwork = [...this.state.Groups];\n      tempNetwork = tempNetwork.filter(user => user.id !== id);\n      const index = tempGroups.indexOf(this.getUser());\n      let removedGroup = tempGroups[index];\n      removedGroup.inNetwork = false;\n      removedGroup.count = 0;\n      this.setState(() => {\n        return {\n          Groups: [...tempNetwork],\n          groups: [...tempGroups]\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setMembers();\n  }\n\n  render() {\n    return React.createElement(GroupContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        handleGroup: this.handleGroup,\n        addGroup: this.addGroup,\n        openModal: this.openModal,\n        closeModal: this.closeModal,\n        removeUser: this.removeUser\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst GroupConsumer = GroupContext.Consumer;\nexport { GroupProvider, GroupConsumer };","map":{"version":3,"sources":["/Users/anetasmac/mentee-react/src/GroupContext.js"],"names":["React","Component","GroupsData","GroupDetail","GroupContext","createContext","GroupProvider","state","groups","Groups","modalOpen","modalMember","setGroups","tempGroups","forEach","user","singleUser","setState","getUser","id","group","find","handleGroup","addGroup","index","indexOf","inNetwork","count","console","log","openModal","closeModal","removeUser","tempNetwork","filter","removedGroup","componentDidMount","setMembers","render","props","children","GroupConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, {Component}  from \"react\"\nimport {GroupsData} from \"./GroupsData\"\nimport {GroupDetail} from \"./GroupsData\"\n\n\n\nconst GroupContext = React.createContext ();\n//Provider\n//Consumer\n\nclass GroupProvider extends Component {\n\tstate ={\n\tgroups: [],\n\tGroups: [],\n\tGroupDetail:[],\n\tmodalOpen:false,\n\tmodalMember:[],\n\t\n    \n\t};\n\t\n\tcomponentDidMount(){\n\tthis.setMembers();\n\t}\n\nsetGroups = ()=>{\nlet tempGroups = [];\nGroupsData.forEach(user=>{\nconst singleUser = {...user};\ntempGroups = [...tempGroups,singleUser];\n});\nthis.setState(()=>{\t\nreturn {groups:tempGroups};\n});\n};\n\n\n\n\ngetUser = id =>{\n\tconst group = this.state.groups.find(user => user.id ===id);\n\treturn group;\n}\n\nhandleGroup = (id) =>{\nconst group = this.getUser(id);\nthis.setState(()=>{\nreturn {GroupDetail:group}\n});\n\n};\n\t\naddGroup = id =>{\n\tlet tempGroups = [...this.state.groups];\n\tconst index = tempGroups.indexOf(this.getUser(id));\n\tconst group = tempGroups[index];\n\tgroup.inNetwork = true;\n\tgroup.count = 1;\n\t\nthis.setState(()=>{\nreturn {groups: tempGroups, Groups:[...this.state.Groups, group]}\n},\n() => {console.log(this.state);}\n);\t\n};\n\nopenModal = id =>{\n\tconst group = this.getUser(id);\n\tthis.setState(()=>{\n\treturn{modalMember: group, modalOpen: true}\n\t})\n\t}\n\ncloseModal = () =>{\nthis.setState(()=>{\n\treturn{modalOpen:false}\n\t})\n\n}\n\nremoveUser = (id) =>{\n\tlet tempGroups = [...this.state.groups];\n\tlet tempNetwork = [...this.state.Groups];\n\t\ntempNetwork = tempNetwork.filter(user => user.id !== id);\n\n\tconst index = tempGroups.indexOf(this.getUser());\n\tlet removedGroup = tempGroups[index];\n\tremovedGroup.inNetwork = false;\n\tremovedGroup.count = 0;\n\nthis.setState(()=>{\n\treturn{\n\t\tGroups:[...tempNetwork],\n\t\tgroups:[...tempGroups]\n\t\n}\n})\n}\n\n\n\n\n\trender() {\n\t\n    return (\n    \n    \n      <GroupContext.Provider value={{\n...this.state,\n      handleGroup:this.handleGroup,\n      addGroup: this.addGroup,\n      openModal: this.openModal,\n      closeModal: this.closeModal,\n      removeUser: this.removeUser,\n      }}\n      >\n      \n      \t{this.props.children}\n      </GroupContext.Provider>\n    );\n    \n    \n  }\n  }\n\nconst GroupConsumer = GroupContext.Consumer;\n\nexport {GroupProvider, GroupConsumer};"]},"metadata":{},"sourceType":"module"}