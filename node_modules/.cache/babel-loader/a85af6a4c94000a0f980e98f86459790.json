{"ast":null,"code":"import React from \"react\";\nimport { Api, JsonRpc, JsSignatureProvider } from \"eosjs\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\"; // Use eosjs2 if your version of eosjs is > 16\n\nimport Eos from 'eosjs';\n\nclass EOSIOClient extends React.Component {\n  constructor(contractAccount) {\n    super(contractAccount);\n    this.contractAccount = contractAccount; // Don't forget to tell ScatterJS which plugins you are using.\n    // Don't forget to tell ScatterJS which plugins you are using.\n\n    ScatterJS.plugins(new ScatterEOS()); // Networks are used to reference certain blockchains.\n    // They let you get accounts and help you build signature providers.\n\n    const network = {\n      blockchain: 'eos',\n      protocol: 'https',\n      host: 'nodes.get-scatter.com',\n      port: 443,\n      chainId: 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906' // First we need to connect to the user's Scatter.\n\n    };\n    ScatterJS.scatter.connect('mentee-react').then(connected => {\n      // If the user does not have Scatter or it is Locked or Closed this will return false;\n      if (!connected) return false;\n      console.log(\"scatter disconnected\");\n      const scatter = ScatterJS.scatter; // Now we need to get an identity from the user.\n      // We're also going to require an account that is connected to the network we're using.\n\n      const requiredFields = {\n        accounts: [network]\n      };\n      scatter.getIdentity(requiredFields).then(() => {\n        // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n        // the user for their account name beforehand. They could still give you a different account.\n        const account = scatter.identity.accounts.find(x => x.blockchain === 'eos'); // You can pass in any additional options you want into the eosjs reference.\n\n        const eosOptions = {\n          expireInSeconds: 60\n        }; // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\n        const eos = scatter.eos(network, Eos, eosOptions); // ----------------------------\n        // Now that we have an identity,\n        // an EOSIO account, and a reference\n        // to an eosjs object we can send a transaction.\n        // ----------------------------\n        // Never assume the account's permission/authority. Always take it from the returned account.\n\n        const transactionOptions = {\n          authorization: [\"\".concat(account.name, \"@\").concat(account.authority)]\n        };\n        eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(trx => {\n          // That's it!\n          console.log(\"Transaction ID: \".concat(trx.transaction_id));\n        }).catch(error => {\n          console.error(error);\n        });\n      }).catch(error => {\n        // The user rejected this request, or doesn't have the appropriate requirements.\n        console.error(error);\n      });\n    });\n  }\n\n}\n\nexport default EOSIOClient;","map":{"version":3,"sources":["/Users/anetasmac/mentee-react/src/Eosio-client.js"],"names":["React","Api","JsonRpc","JsSignatureProvider","ScatterJS","ScatterEOS","Eos","EOSIOClient","Component","constructor","contractAccount","plugins","network","blockchain","protocol","host","port","chainId","scatter","connect","then","connected","console","log","requiredFields","accounts","getIdentity","account","identity","find","x","eosOptions","expireInSeconds","eos","transactionOptions","authorization","name","authority","transfer","trx","transaction_id","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,mBAAvB,QAAkD,OAAlD;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CAAkD;;AAClD,OAAOC,GAAP,MAAgB,OAAhB;;AAGA,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AACzCC,EAAAA,WAAW,CAACC,eAAD,EAAkB;AAC5B,UAAMA,eAAN;AACA,SAAKA,eAAL,GAAuBA,eAAvB,CAF4B,CAI5B;AAEF;;AACAN,IAAAA,SAAS,CAACO,OAAV,CAAmB,IAAIN,UAAJ,EAAnB,EAP8B,CAS9B;AACA;;AACA,UAAMO,OAAO,GAAG;AACZC,MAAAA,UAAU,EAAC,KADC;AAEZC,MAAAA,QAAQ,EAAC,OAFG;AAGZC,MAAAA,IAAI,EAAC,uBAHO;AAIZC,MAAAA,IAAI,EAAC,GAJO;AAKZC,MAAAA,OAAO,EAAC,kEALI,CAQhB;;AARgB,KAAhB;AASAb,IAAAA,SAAS,CAACc,OAAV,CAAkBC,OAAlB,CAA0B,cAA1B,EAA0CC,IAA1C,CAA+CC,SAAS,IAAI;AAExD;AACA,UAAG,CAACA,SAAJ,EAAe,OAAO,KAAP;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACI,YAAML,OAAO,GAAGd,SAAS,CAACc,OAA1B,CALwD,CAOxD;AACA;;AACA,YAAMM,cAAc,GAAG;AAAEC,QAAAA,QAAQ,EAAC,CAACb,OAAD;AAAX,OAAvB;AACAM,MAAAA,OAAO,CAACQ,WAAR,CAAoBF,cAApB,EAAoCJ,IAApC,CAAyC,MAAM;AAE3C;AACA;AACA,cAAMO,OAAO,GAAGT,OAAO,CAACU,QAAR,CAAiBH,QAAjB,CAA0BI,IAA1B,CAA+BC,CAAC,IAAIA,CAAC,CAACjB,UAAF,KAAiB,KAArD,CAAhB,CAJ2C,CAM3C;;AACA,cAAMkB,UAAU,GAAG;AAAEC,UAAAA,eAAe,EAAC;AAAlB,SAAnB,CAP2C,CAS3C;;AACA,cAAMC,GAAG,GAAGf,OAAO,CAACe,GAAR,CAAYrB,OAAZ,EAAqBN,GAArB,EAA0ByB,UAA1B,CAAZ,CAV2C,CAY3C;AACA;AACA;AACA;AACA;AAGA;;AACA,cAAMG,kBAAkB,GAAG;AAAEC,UAAAA,aAAa,EAAC,WAAIR,OAAO,CAACS,IAAZ,cAAoBT,OAAO,CAACU,SAA5B;AAAhB,SAA3B;AAEAJ,QAAAA,GAAG,CAACK,QAAJ,CAAaX,OAAO,CAACS,IAArB,EAA2B,YAA3B,EAAyC,YAAzC,EAAuD,MAAvD,EAA+DF,kBAA/D,EAAmFd,IAAnF,CAAwFmB,GAAG,IAAI;AAC3F;AACAjB,UAAAA,OAAO,CAACC,GAAR,2BAA+BgB,GAAG,CAACC,cAAnC;AACH,SAHD,EAGGC,KAHH,CAGSC,KAAK,IAAI;AACdpB,UAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACH,SALD;AAOH,OA7BD,EA6BGD,KA7BH,CA6BSC,KAAK,IAAI;AACd;AACApB,QAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACH,OAhCD;AAiCH,KA3CD;AA4CE;;AAjEwC;;AAoE1C,eAAenC,WAAf","sourcesContent":["import React from \"react\";\nimport { Api, JsonRpc, JsSignatureProvider } from \"eosjs\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\"; // Use eosjs2 if your version of eosjs is > 16\nimport Eos from 'eosjs';\n\n\nclass EOSIOClient extends React.Component {\n\tconstructor(contractAccount) {\n\t\tsuper(contractAccount);\n\t\tthis.contractAccount = contractAccount;\n\n\t\t// Don't forget to tell ScatterJS which plugins you are using.\n\t\t\n// Don't forget to tell ScatterJS which plugins you are using.\nScatterJS.plugins( new ScatterEOS() );\n\n// Networks are used to reference certain blockchains.\n// They let you get accounts and help you build signature providers.\nconst network = {\n    blockchain:'eos',\n    protocol:'https',\n    host:'nodes.get-scatter.com',\n    port:443,\n    chainId:'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'\n}\n\n// First we need to connect to the user's Scatter.\nScatterJS.scatter.connect('mentee-react').then(connected => {\n\n    // If the user does not have Scatter or it is Locked or Closed this will return false;\n    if(!connected) return false;\nconsole.log(\"scatter disconnected\");\n    const scatter = ScatterJS.scatter;\n\n    // Now we need to get an identity from the user.\n    // We're also going to require an account that is connected to the network we're using.\n    const requiredFields = { accounts:[network] };\n    scatter.getIdentity(requiredFields).then(() => {\n\n        // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n        // the user for their account name beforehand. They could still give you a different account.\n        const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n\n        // You can pass in any additional options you want into the eosjs reference.\n        const eosOptions = { expireInSeconds:60 };\n\n        // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n        const eos = scatter.eos(network, Eos, eosOptions);\n\n        // ----------------------------\n        // Now that we have an identity,\n        // an EOSIO account, and a reference\n        // to an eosjs object we can send a transaction.\n        // ----------------------------\n\n\n        // Never assume the account's permission/authority. Always take it from the returned account.\n        const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n\n        eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(trx => {\n            // That's it!\n            console.log(`Transaction ID: ${trx.transaction_id}`);\n        }).catch(error => {\n            console.error(error);\n        });\n\n    }).catch(error => {\n        // The user rejected this request, or doesn't have the appropriate requirements.\n        console.error(error);\n    });\n});\n\t};\n}\n\nexport default EOSIOClient;"]},"metadata":{},"sourceType":"module"}