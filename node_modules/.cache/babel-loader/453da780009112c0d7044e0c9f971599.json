{"ast":null,"code":"import _objectSpread from \"/Users/anetasmac/mentee-react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport React from \"react\";\nimport { Api, JsonRpc, JsSignatureProvider } from \"eosjs\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\"; // Use eosjs2 if your version of eosjs is > 16\n// eosio endpoint\n\nconst endpoint = \"http://jungle2.cryptolions.io:80\"; // Jungle\n// Networks are used to reference certain blockchains.\n// They let you get accounts and help you build signature providers.\n\nconst network = {\n  blockchain: \"eos\",\n  protocol: \"http\",\n  host: \"jungle2.cryptolions.io\",\n  port: 80,\n  // chainId: \"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906\" // EOS Main Net\n  chainId: \"e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473\" // Jungle\n\n};\n\nclass EOSIOClient extends React.Component {\n  constructor(contractAccount) {\n    super(contractAccount);\n\n    this.transaction = (action, data) => {\n      return this.eos.transact({\n        actions: [{\n          account: this.contractAccount,\n          name: action,\n          authorization: [{\n            actor: this.account.name,\n            permission: this.account.authority\n          }],\n          data: _objectSpread({}, data)\n        }]\n      }, {\n        blocksBehind: 3,\n        expireSeconds: 30\n      });\n    };\n\n    this.contractAccount = contractAccount; // Don't forget to tell ScatterJS which plugins you are using.\n\n    ScatterJS.plugins(new ScatterEOS()); // Can implement this into Redux using dispatch(setScatter(ScatterJS.scatter));\n\n    try {\n      ScatterJS.scatter.connect(this.contractAccount).then(connected => {\n        // User does not have Scatter Desktop, Mobile or Classic installed.\n        if (!connected) return console.log(\"Issue Connecting\");\n        const scatter = ScatterJS.scatter;\n        const requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(() => {\n          // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n          // the user for their account name beforehand. They could still give you a different account.\n          this.account = scatter.identity.accounts.find(x => x.blockchain === \"eos\"); // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\n          const rpc = new JsonRpc(endpoint);\n          this.eos = scatter.eos(network, Api, {\n            rpc\n          });\n        });\n        window.ScatterJS = null;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n\nexport default EOSIOClient;","map":{"version":3,"sources":["/Users/anetasmac/mentee-react/src/Eosio-client.js"],"names":["React","Api","JsonRpc","JsSignatureProvider","ScatterJS","ScatterEOS","endpoint","network","blockchain","protocol","host","port","chainId","EOSIOClient","Component","constructor","contractAccount","transaction","action","data","eos","transact","actions","account","name","authorization","actor","permission","authority","blocksBehind","expireSeconds","plugins","scatter","connect","then","connected","console","log","requiredFields","accounts","getIdentity","identity","find","x","rpc","window","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,mBAAvB,QAAkD,OAAlD;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CAAkD;AAElD;;AACA,MAAMC,QAAQ,GAAG,kCAAjB,C,CAAqD;AAErD;AACA;;AACA,MAAMC,OAAO,GAAG;AACfC,EAAAA,UAAU,EAAE,KADG;AAEfC,EAAAA,QAAQ,EAAE,MAFK;AAGfC,EAAAA,IAAI,EAAE,wBAHS;AAIfC,EAAAA,IAAI,EAAE,EAJS;AAKf;AACAC,EAAAA,OAAO,EAAE,kEANM,CAM6D;;AAN7D,CAAhB;;AASA,MAAMC,WAAN,SAA0Bb,KAAK,CAACc,SAAhC,CAA0C;AACzCC,EAAAA,WAAW,CAACC,eAAD,EAAkB;AAC5B,UAAMA,eAAN;;AAD4B,SAqC7BC,WArC6B,GAqCf,CAACC,MAAD,EAASC,IAAT,KAAkB;AAC/B,aAAO,KAAKC,GAAL,CAASC,QAAT,CACN;AACCC,QAAAA,OAAO,EAAE,CACR;AACCC,UAAAA,OAAO,EAAE,KAAKP,eADf;AAECQ,UAAAA,IAAI,EAAEN,MAFP;AAGCO,UAAAA,aAAa,EAAE,CACd;AACCC,YAAAA,KAAK,EAAE,KAAKH,OAAL,CAAaC,IADrB;AAECG,YAAAA,UAAU,EAAE,KAAKJ,OAAL,CAAaK;AAF1B,WADc,CAHhB;AASCT,UAAAA,IAAI,oBACAA,IADA;AATL,SADQ;AADV,OADM,EAkBN;AACCU,QAAAA,YAAY,EAAE,CADf;AAECC,QAAAA,aAAa,EAAE;AAFhB,OAlBM,CAAP;AAuBA,KA7D4B;;AAE5B,SAAKd,eAAL,GAAuBA,eAAvB,CAF4B,CAI5B;;AACAZ,IAAAA,SAAS,CAAC2B,OAAV,CAAkB,IAAI1B,UAAJ,EAAlB,EAL4B,CAO5B;;AACA,QAAI;AACHD,MAAAA,SAAS,CAAC4B,OAAV,CAAkBC,OAAlB,CAA0B,KAAKjB,eAA/B,EAAgDkB,IAAhD,CAAqDC,SAAS,IAAI;AACjE;AACA,YAAI,CAACA,SAAL,EAAgB,OAAOC,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAP;AAEhB,cAAML,OAAO,GAAG5B,SAAS,CAAC4B,OAA1B;AAEA,cAAMM,cAAc,GAAG;AACtBC,UAAAA,QAAQ,EAAE,CAAChC,OAAD;AADY,SAAvB;AAGAyB,QAAAA,OAAO,CAACQ,WAAR,CAAoBF,cAApB,EAAoCJ,IAApC,CAAyC,MAAM;AAC9C;AACA;AACA,eAAKX,OAAL,GAAeS,OAAO,CAACS,QAAR,CAAiBF,QAAjB,CAA0BG,IAA1B,CACdC,CAAC,IAAIA,CAAC,CAACnC,UAAF,KAAiB,KADR,CAAf,CAH8C,CAO9C;;AACA,gBAAMoC,GAAG,GAAG,IAAI1C,OAAJ,CAAYI,QAAZ,CAAZ;AACA,eAAKc,GAAL,GAAWY,OAAO,CAACZ,GAAR,CAAYb,OAAZ,EAAqBN,GAArB,EAA0B;AAAE2C,YAAAA;AAAF,WAA1B,CAAX;AACA,SAVD;AAYAC,QAAAA,MAAM,CAACzC,SAAP,GAAmB,IAAnB;AACA,OAtBD;AAuBA,KAxBD,CAwBE,OAAO0C,KAAP,EAAc;AACfV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACA;AACD;;AApCwC;;AAiE1C,eAAejC,WAAf","sourcesContent":["import React from \"react\";\nimport { Api, JsonRpc, JsSignatureProvider } from \"eosjs\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\"; // Use eosjs2 if your version of eosjs is > 16\n\n// eosio endpoint\nconst endpoint = \"http://jungle2.cryptolions.io:80\"; // Jungle\n\n// Networks are used to reference certain blockchains.\n// They let you get accounts and help you build signature providers.\nconst network = {\n\tblockchain: \"eos\",\n\tprotocol: \"http\",\n\thost: \"jungle2.cryptolions.io\",\n\tport: 80,\n\t// chainId: \"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906\" // EOS Main Net\n\tchainId: \"e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473\" // Jungle\n};\n\nclass EOSIOClient extends React.Component {\n\tconstructor(contractAccount) {\n\t\tsuper(contractAccount);\n\t\tthis.contractAccount = contractAccount;\n\n\t\t// Don't forget to tell ScatterJS which plugins you are using.\n\t\tScatterJS.plugins(new ScatterEOS());\n\n\t\t// Can implement this into Redux using dispatch(setScatter(ScatterJS.scatter));\n\t\ttry {\n\t\t\tScatterJS.scatter.connect(this.contractAccount).then(connected => {\n\t\t\t\t// User does not have Scatter Desktop, Mobile or Classic installed.\n\t\t\t\tif (!connected) return console.log(\"Issue Connecting\");\n\n\t\t\t\tconst scatter = ScatterJS.scatter;\n\n\t\t\t\tconst requiredFields = {\n\t\t\t\t\taccounts: [network]\n\t\t\t\t};\n\t\t\t\tscatter.getIdentity(requiredFields).then(() => {\n\t\t\t\t\t// Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n\t\t\t\t\t// the user for their account name beforehand. They could still give you a different account.\n\t\t\t\t\tthis.account = scatter.identity.accounts.find(\n\t\t\t\t\t\tx => x.blockchain === \"eos\"\n\t\t\t\t\t);\n\n\t\t\t\t\t// Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\t\t\t\t\tconst rpc = new JsonRpc(endpoint);\n\t\t\t\t\tthis.eos = scatter.eos(network, Api, { rpc });\n\t\t\t\t});\n\n\t\t\t\twindow.ScatterJS = null;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\ttransaction = (action, data) => {\n\t\treturn this.eos.transact(\n\t\t\t{\n\t\t\t\tactions: [\n\t\t\t\t\t{\n\t\t\t\t\t\taccount: this.contractAccount,\n\t\t\t\t\t\tname: action,\n\t\t\t\t\t\tauthorization: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tactor: this.account.name,\n\t\t\t\t\t\t\t\tpermission: this.account.authority\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t...data\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tblocksBehind: 3,\n\t\t\t\texpireSeconds: 30\n\t\t\t}\n\t\t);\n\t};\n}\n\nexport default EOSIOClient;"]},"metadata":{},"sourceType":"module"}